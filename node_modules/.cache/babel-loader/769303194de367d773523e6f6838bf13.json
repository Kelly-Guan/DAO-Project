{"ast":null,"code":"var _jsxFileName = \"/Users/kellyguan/CheeseDAO/DAO/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useWeb3 } from \"@3rdweb/hooks\";\nimport { ThirdwebSDK } from \"@3rdweb/sdk\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sdk = new ThirdwebSDK(\"rinkeby\");\nconst bundleDropModule = sdk.getBundleDropModule(\"0x5e325Dc3E3d48D4c9cEb51Bd8901188449EB711d\");\nconst tokenModule = sdk.getTokenModule(\"0x31eAD61E5e6605C8b3d31A9A006Ef13EFD532793\");\nconst voteModule = sdk.getVoteModule(\"0x068489bF45f9DE8e4724cF636fFD4ae285BB48C0\");\n\nconst App = () => {\n  _s();\n\n  const [proposals, setProposals] = useState([]);\n  const [isVoting, setIsVoting] = useState(false);\n  const [hasVoted, setHasVoted] = useState(false); // Retrieve all our existing proposals from the contract.\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    } // A simple call to voteModule.getAll() to grab the proposals.\n\n\n    voteModule.getAll().then(proposals => {\n      // Set state!\n      setProposals(proposals);\n      console.log(\"🌈 Proposals:\", proposals);\n    }).catch(err => {\n      console.error(\"failed to get proposals\", err);\n    });\n  }, [hasClaimedNFT]); // We also need to check if the user already voted.\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    } // If we haven't finished retrieving the proposals from the useEffect above\n    // then we can't check if the user voted yet!\n\n\n    if (!proposals.length) {\n      return;\n    } // Check if the user has already voted on the first proposal.\n\n\n    voteModule.hasVoted(proposals[0].proposalId, address).then(hasVoted => {\n      setHasVoted(hasVoted);\n      console.log(\"🥵 User has already voted\");\n    }).catch(err => {\n      console.error(\"failed to check if wallet has voted\", err);\n    });\n  }, [hasClaimedNFT, proposals, address]);\n  const {\n    connectWallet,\n    address,\n    error,\n    provider\n  } = useWeb3();\n  console.log(\"👋 Address:\", address); // The signer is required to sign transactions on the blockchain.\n  // Without it we can only read data, not write.\n\n  const signer = provider ? provider.getSigner() : undefined;\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false); // isClaiming lets us easily keep a loading state while the NFT is minting.\n\n  const [isClaiming, setIsClaiming] = useState(false); // Holds the amount of token each member has in state.\n\n  const [memberTokenAmounts, setMemberTokenAmounts] = useState({}); // The array holding all of our members addresses.\n\n  const [memberAddresses, setMemberAddresses] = useState([]); // A fancy function to shorten someones wallet address, no need to show the whole thing. \n\n  const shortenAddress = str => {\n    return str.substring(0, 6) + \"...\" + str.substring(str.length - 4);\n  }; // This useEffect grabs all our the addresses of our members holding our NFT.\n\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    } // Just like we did in the 7-airdrop-token.js file! Grab the users who hold our NFT\n    // with tokenId 0.\n\n\n    bundleDropModule.getAllClaimerAddresses(\"0\").then(addresess => {\n      console.log(\"🚀 Members addresses\", addresess);\n      setMemberAddresses(addresess);\n    }).catch(err => {\n      console.error(\"failed to get member list\", err);\n    });\n  }, [hasClaimedNFT]); // This useEffect grabs the # of token each member holds.\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    } // Grab all the balances.\n\n\n    tokenModule.getAllHolderBalances().then(amounts => {\n      console.log(\"👜 Amounts\", amounts);\n      setMemberTokenAmounts(amounts);\n    }).catch(err => {\n      console.error(\"failed to get token amounts\", err);\n    });\n  }, [hasClaimedNFT]); // Now, we combine the memberAddresses and memberTokenAmounts into a single array\n\n  const memberList = useMemo(() => {\n    return memberAddresses.map(address => {\n      return {\n        address,\n        tokenAmount: ethers.utils.formatUnits( // If the address isn't in memberTokenAmounts, it means they don't\n        // hold any of our token.\n        memberTokenAmounts[address] || 0, 18)\n      };\n    });\n  }, [memberAddresses, memberTokenAmounts]); // Another useEffect!\n\n  useEffect(() => {\n    // We pass the signer to the sdk, which enables us to interact with\n    // our deployed contract!\n    sdk.setProviderOrSigner(signer);\n  }, [signer]);\n  useEffect(() => {\n    if (!address) {\n      return;\n    }\n\n    return bundleDropModule.balanceOf(address, \"0\").then(balance => {\n      if (balance.gt(0)) {\n        setHasClaimedNFT(true);\n        console.log(\"🌟 this user has a membership NFT!\");\n      } else {\n        setHasClaimedNFT(false);\n        console.log(\"😭 this user doesn't have a membership NFT.\");\n      }\n    }).catch(error => {\n      setHasClaimedNFT(false);\n      console.error(\"failed to nft balance\", error);\n    });\n  }, [address]);\n\n  if (!address) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"landing\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to NarutoDAO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => connectWallet(\"injected\"),\n        className: \"btn-hero\",\n        children: \"Connect your wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this);\n  } // Add this little piece!\n\n\n  if (hasClaimedNFT) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"member-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83C\\uDF6ADAO Member Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"\\uD83C\\uDF0A Successfully Minted! Check it out on OpenSea: https://testnets.opensea.io/assets/\", bundleDropModule.address, \"/0\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Congratulations on being a member\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Member List\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"card\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Address\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 192,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Token Amount\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 193,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: memberList.map(member => {\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: shortenAddress(member.address)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 200,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: member.tokenAmount\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 201,\n                    columnNumber: 21\n                  }, this)]\n                }, member.address, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 19\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this);\n  }\n\n  ;\n\n  const mintNft = () => {\n    setIsClaiming(true); // Call bundleDropModule.claim(\"0\", 1) to mint nft to user's wallet.\n\n    bundleDropModule.claim(\"0\", 1).catch(err => {\n      console.error(\"failed to claim\", err);\n      setIsClaiming(false);\n    }).finally(() => {\n      // Stop loading state.\n      setIsClaiming(false); // Set claim state.\n\n      setHasClaimedNFT(true); // Show user their fancy new NFT!\n    });\n  }; // Render mint nft screen.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mint-nft\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Mint your free \\uD83C\\uDF6ADAO Membership NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: isClaiming,\n      onClick: () => mintNft(),\n      children: isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"hu1cMpP4zGX6DyScDYAixKHvaTI=\", false, function () {\n  return [useWeb3];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/kellyguan/CheeseDAO/DAO/src/App.jsx"],"names":["useEffect","useMemo","useState","useWeb3","ThirdwebSDK","ethers","sdk","bundleDropModule","getBundleDropModule","tokenModule","getTokenModule","voteModule","getVoteModule","App","proposals","setProposals","isVoting","setIsVoting","hasVoted","setHasVoted","hasClaimedNFT","getAll","then","console","log","catch","err","error","length","proposalId","address","connectWallet","provider","signer","getSigner","undefined","setHasClaimedNFT","isClaiming","setIsClaiming","memberTokenAmounts","setMemberTokenAmounts","memberAddresses","setMemberAddresses","shortenAddress","str","substring","getAllClaimerAddresses","addresess","getAllHolderBalances","amounts","memberList","map","tokenAmount","utils","formatUnits","setProviderOrSigner","balanceOf","balance","gt","member","mintNft","claim","finally"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\n\nimport { useWeb3 } from \"@3rdweb/hooks\";\nimport { ThirdwebSDK } from \"@3rdweb/sdk\";\nimport { ethers } from \"ethers\";\n\nconst sdk = new ThirdwebSDK(\"rinkeby\");\n\nconst bundleDropModule = sdk.getBundleDropModule(\n  \"0x5e325Dc3E3d48D4c9cEb51Bd8901188449EB711d\",\n);\n\nconst tokenModule = sdk.getTokenModule(\n  \"0x31eAD61E5e6605C8b3d31A9A006Ef13EFD532793\"\n);\n\nconst voteModule = sdk.getVoteModule(\n  \"0x068489bF45f9DE8e4724cF636fFD4ae285BB48C0\",\n);\n\nconst App = () => {\n  const [proposals, setProposals] = useState([]);\nconst [isVoting, setIsVoting] = useState(false);\nconst [hasVoted, setHasVoted] = useState(false);\n\n// Retrieve all our existing proposals from the contract.\nuseEffect(() => {\n  if (!hasClaimedNFT) {\n    return;\n  }\n  // A simple call to voteModule.getAll() to grab the proposals.\n  voteModule\n    .getAll()\n    .then((proposals) => {\n      // Set state!\n      setProposals(proposals);\n      console.log(\"🌈 Proposals:\", proposals)\n    })\n    .catch((err) => {\n      console.error(\"failed to get proposals\", err);\n    });\n}, [hasClaimedNFT]);\n\n// We also need to check if the user already voted.\nuseEffect(() => {\n  if (!hasClaimedNFT) {\n    return;\n  }\n\n  // If we haven't finished retrieving the proposals from the useEffect above\n  // then we can't check if the user voted yet!\n  if (!proposals.length) {\n    return;\n  }\n\n  // Check if the user has already voted on the first proposal.\n  voteModule\n    .hasVoted(proposals[0].proposalId, address)\n    .then((hasVoted) => {\n      setHasVoted(hasVoted);\n      console.log(\"🥵 User has already voted\")\n    })\n    .catch((err) => {\n      console.error(\"failed to check if wallet has voted\", err);\n    });\n}, [hasClaimedNFT, proposals, address]);\n\n  const { connectWallet, address, error, provider } = useWeb3();\n  console.log(\"👋 Address:\", address)\n\n  // The signer is required to sign transactions on the blockchain.\n  // Without it we can only read data, not write.\n  const signer = provider ? provider.getSigner() : undefined;\n\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false);\n  // isClaiming lets us easily keep a loading state while the NFT is minting.\n  const [isClaiming, setIsClaiming] = useState(false);\n  // Holds the amount of token each member has in state.\n  const [memberTokenAmounts, setMemberTokenAmounts] = useState({});\n  // The array holding all of our members addresses.\n  const [memberAddresses, setMemberAddresses] = useState([]);\n\n  // A fancy function to shorten someones wallet address, no need to show the whole thing. \n  const shortenAddress = (str) => {\n    return str.substring(0, 6) + \"...\" + str.substring(str.length - 4);\n  };\n\n  // This useEffect grabs all our the addresses of our members holding our NFT.\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n    \n    // Just like we did in the 7-airdrop-token.js file! Grab the users who hold our NFT\n    // with tokenId 0.\n    bundleDropModule\n      .getAllClaimerAddresses(\"0\")\n      .then((addresess) => {\n        console.log(\"🚀 Members addresses\", addresess)\n        setMemberAddresses(addresess);\n      })\n      .catch((err) => {\n        console.error(\"failed to get member list\", err);\n      });\n  }, [hasClaimedNFT]);\n\n  // This useEffect grabs the # of token each member holds.\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n\n    // Grab all the balances.\n    tokenModule\n      .getAllHolderBalances()\n      .then((amounts) => {\n        console.log(\"👜 Amounts\", amounts)\n        setMemberTokenAmounts(amounts);\n      })\n      .catch((err) => {\n        console.error(\"failed to get token amounts\", err);\n      });\n  }, [hasClaimedNFT]);\n\n  // Now, we combine the memberAddresses and memberTokenAmounts into a single array\n  const memberList = useMemo(() => {\n    return memberAddresses.map((address) => {\n      return {\n        address,\n        tokenAmount: ethers.utils.formatUnits(\n          // If the address isn't in memberTokenAmounts, it means they don't\n          // hold any of our token.\n          memberTokenAmounts[address] || 0,\n          18,\n        ),\n      };\n    });\n  }, [memberAddresses, memberTokenAmounts]);\n\n  // Another useEffect!\n  useEffect(() => {\n    // We pass the signer to the sdk, which enables us to interact with\n    // our deployed contract!\n    sdk.setProviderOrSigner(signer);\n  }, [signer]);\n\n  useEffect(() => {\n    if (!address) {\n      return;\n    }\n    return bundleDropModule\n      .balanceOf(address, \"0\")\n      .then((balance) => {\n        if (balance.gt(0)) {\n          setHasClaimedNFT(true);\n          console.log(\"🌟 this user has a membership NFT!\")\n        } else {\n          setHasClaimedNFT(false);\n          console.log(\"😭 this user doesn't have a membership NFT.\")\n        }\n      })\n      .catch((error) => {\n        setHasClaimedNFT(false);\n        console.error(\"failed to nft balance\", error);\n      });\n  }, [address]);\n\n  if (!address) {\n    return (\n      <div className=\"landing\">\n        <h1>Welcome to NarutoDAO</h1>\n        <button onClick={() => connectWallet(\"injected\")} className=\"btn-hero\">\n          Connect your wallet\n        </button>\n      </div>\n    );\n  }\n\n  // Add this little piece!\n  if (hasClaimedNFT) {\n    return (\n      <div className=\"member-page\">\n        <h1>🍪DAO Member Page</h1>\n        <h4>🌊 Successfully Minted! Check it out on OpenSea: https://testnets.opensea.io/assets/{bundleDropModule.address}/0</h4> \n        <p>Congratulations on being a member</p>\n        <div>\n        <div>\n          <h2>Member List</h2>\n          <table className=\"card\">\n            <thead>\n              <tr>\n                <th>Address</th>\n                <th>Token Amount</th>\n              </tr>\n            </thead>\n            <tbody>\n              {memberList.map((member) => {\n                return (\n                  <tr key={member.address}>\n                    <td>{shortenAddress(member.address)}</td>\n                    <td>{member.tokenAmount}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n      </div>\n    );\n  };\n\n  const mintNft = () => {\n    setIsClaiming(true);\n    // Call bundleDropModule.claim(\"0\", 1) to mint nft to user's wallet.\n    bundleDropModule\n    .claim(\"0\", 1)\n    .catch((err) => {\n      console.error(\"failed to claim\", err);\n      setIsClaiming(false);\n    })\n    .finally(() => {\n      // Stop loading state.\n      setIsClaiming(false);\n      // Set claim state.\n      setHasClaimedNFT(true);\n      // Show user their fancy new NFT!\n    });\n  }\n\n  // Render mint nft screen.\n  return (\n    <div className=\"mint-nft\">\n      <h1>Mint your free 🍪DAO Membership NFT</h1>\n      <button\n        disabled={isClaiming}\n        onClick={() => mintNft()}\n      >\n        {isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"}\n      </button>\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}